***********************************************************************************************************************************************
SORTING A COMPLEX LIST : ASC order
***********************************************************************************************************************************************
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {
        public static void Main(string[] args)
        {
            Customer customer1 = new Customer() { name = "Soham", id = 101, money = 50 };
            Customer customer2 = new Customer() { name = "Ivy", id = 102, money = 85 };
            Customer customer3 = new Customer() { name = "Sreeparna k", id = 106, money = 51 };
            Customer customer4 = new Customer() { name = "Puja", id = 108, money = 63 };

            //int a = customer1.money.CompareTo(customer2.money); //-1 that means customer1 has less money then customer 2 
            //GO TO THE DEFINITION OF COMPARETO, AND THEN MOVE INTO ICOMPARABLE INTERFACE

            List<Customer> obn = new List<Customer>(4);
            obn.Add(customer1);
            obn.Add(customer2);
            obn.Add(customer3);
            obn.Add(customer4);

            obn.Sort();

            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }

            //Console.WriteLine(a);
            Console.ReadKey();
        }
    }
    class Customer : IComparable<Customer> //gets all value from IComparable
    {
        public string name { get; set; }
        public int id { get; set; }
        public int money { get; set; }

        public int CompareTo(Customer obj) //this signature is like the method declared at IComparable interface; [ int CompareTo(object obj)]
        {
            if (this.money > obj.money)
                return 1;
            else if (this.money < obj.money)
                return -1;
            else
                return 0;
        }
    }
}
-----------------------------------------------------------------------------------------
Name = Soham, Id = 101, Money = 50
Name = Sreeparna k, Id = 106, Money = 51
Name = Puja, Id = 108, Money = 63
Name = Ivy, Id = 102, Money = 85
-------------------------------------------------------------------------------------------
***********************************************************************************************************************************************
SORTING A COMPLEX LIST : DESC
***********************************************************************************************************************************************
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {
        public static void Main(string[] args)
        {
            Customer customer1 = new Customer() { name = "Soham", id = 101, money = 50 };
            Customer customer2 = new Customer() { name = "Ivy", id = 102, money = 85 };
            Customer customer3 = new Customer() { name = "Sreeparna k", id = 106, money = 51 };
            Customer customer4 = new Customer() { name = "Puja", id = 108, money = 63 };

            //int a = customer1.money.CompareTo(customer2.money); //-1 that means customer1 has less money then customer 2 
            //GO TO THE DEFINITION OF COMPARETO, AND THEN MOVE INTO ICOMPARABLE INTERFACE

            List<Customer> obn = new List<Customer>(4);
            obn.Add(customer1);
            obn.Add(customer2);
            obn.Add(customer3);
            obn.Add(customer4);

            obn.Sort();

            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }

            //Console.WriteLine(a);

            //IF I WANT THE LIST IN DESC ORDER
            obn.Reverse();

            Console.WriteLine();
            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }
            Console.ReadKey();
        }
    }
    class Customer : IComparable<Customer> //gets all value from IComparable
    {
        public string name { get; set; }
        public int id { get; set; }
        public int money { get; set; }

        public int CompareTo(Customer obj) //this signature is like the method declared at IComparable interface; [ int CompareTo(object obj)]
        {
            if (this.money > obj.money)
                return 1;
            else if (this.money < obj.money)
                return -1;
            else
                return 0;
        }
    }
}

***********************************************************************************************************************************************
SORTING A COMPLEX LIST : ASC order & DESC order.... 
***********************************************************************************************************************************************
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {
        public static void Main(string[] args)
        {
            Customer customer1 = new Customer() { name = "Soham", id = 101, money = 50 };
            Customer customer2 = new Customer() { name = "Ivy", id = 102, money = 85 };
            Customer customer3 = new Customer() { name = "Sreeparna k", id = 106, money = 51 };
            Customer customer4 = new Customer() { name = "Puja", id = 108, money = 63 };

            //int a = customer1.money.CompareTo(customer2.money); //-1 that means customer1 has less money then customer 2 
            //GO TO THE DEFINITION OF COMPARETO, AND THEN MOVE INTO ICOMPARABLE INTERFACE

            List<Customer> obn = new List<Customer>(4);
            obn.Add(customer1);
            obn.Add(customer2);
            obn.Add(customer3);
            obn.Add(customer4);

            obn.Sort();

            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }

            //Console.WriteLine(a);

            //IF I WANT THE LIST IN DESC ORDER
            obn.Reverse();

            Console.WriteLine();
            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }
            Console.ReadKey();
        }
    }
    class Customer : IComparable<Customer> //gets all value from IComparable
    {
        public string name { get; set; }
        public int id { get; set; }
        public int money { get; set; }

        public int CompareTo(Customer obj) //this signature is like the method declared at IComparable interface; [ int CompareTo(object obj)]
        {
            return this.money.CompareTo(obj.money);   //just implemented before
        }
    }
}

***********************************************************************************************************************************************
SORTING A COMPLEX LIST : ASC order & DESC order :::::::::::;ACCORDING TO THE NAME
***********************************************************************************************************************************************
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {
        public static void Main(string[] args)
        {
            Customer customer1 = new Customer() { name = "Soham", id = 101, money = 50 };
            Customer customer2 = new Customer() { name = "Ivy", id = 102, money = 85 };
            Customer customer3 = new Customer() { name = "Sreeparna k", id = 106, money = 51 };
            Customer customer4 = new Customer() { name = "Puja", id = 108, money = 63 };

            //int a = customer1.money.CompareTo(customer2.money); //-1 that means customer1 has less money then customer 2 
            //GO TO THE DEFINITION OF COMPARETO, AND THEN MOVE INTO ICOMPARABLE INTERFACE

            List<Customer> obn = new List<Customer>(4);
            obn.Add(customer1);
            obn.Add(customer2);
            obn.Add(customer3);
            obn.Add(customer4);

            obn.Sort();

            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }

            //Console.WriteLine(a);

            //IF I WANT THE LIST IN DESC ORDER
            obn.Reverse();

            Console.WriteLine();
            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }
            Console.ReadKey();
        }
    }
    class Customer : IComparable<Customer> //gets all value from IComparable
    {
        public string name { get; set; }
        public int id { get; set; }
        public int money { get; set; }

        public int CompareTo(Customer obj) //this signature is like the method declared at IComparable interface; [ int CompareTo(object obj)]
        {
            return this.name.CompareTo(obj.name);
        }
    }
}
***********************************************************************************************************************************************
SORTING A COMPLEX LIST : ASC order & DESC order :::::::::::;ACCORDING TO THE NAME
***********************************************************************************************************************************************
using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Linq;

namespace ConsoleApp3
{
    class Program
    {
        public static void Main(string[] args)
        {
            Customer customer1 = new Customer() { name = "Soham", id = 101, money = 50 };
            Customer customer2 = new Customer() { name = "Ivy", id = 102, money = 85 };
            Customer customer3 = new Customer() { name = "Sreeparna k", id = 106, money = 51 };
            Customer customer4 = new Customer() { name = "Puja", id = 108, money = 63 };
            
            List<Customer> obn = new List<Customer>(4);
            obn.Add(customer1);
            obn.Add(customer2);
            obn.Add(customer3);
            obn.Add(customer4);

            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }

            mysort ob = new mysort();
            obn.Sort(ob);
            obn.Reverse(); //************************************ reversing the order********************************

            Console.WriteLine();
            foreach(Customer cc in obn)
            {
                Console.WriteLine("Name = {0}, Id = {1}, Money = {2}", cc.name, cc.id, cc.money);
            }
            Console.ReadKey();
        }
    }

    class mysort : IComparer<Customer>  //IComparer is an overloaded vertion of Sort method
    {
        public int Compare(Customer x, Customer y)
        {
            //return x.CompareTo(y); error BECAUSE it is a complex list, so we cant compare them all at atime
            return x.name.CompareTo(y.name);
        }
    }

    //when you dont want to use the Customer class, to sort, then you gotta CREATE A NEW CLASS; that will inherit from IComparer<Customer> class.
    class Customer  //gets all value from IComparable
    {
        public string name { get; set; }
        public int id { get; set; }
        public int money { get; set; }
    }
}
-----------------------------------------------------------
Name = Soham, Id = 101, Money = 50
Name = Ivy, Id = 102, Money = 85
Name = Sreeparna k, Id = 106, Money = 51
Name = Puja, Id = 108, Money = 63

Name = Ivy, Id = 102, Money = 85
Name = Puja, Id = 108, Money = 63
Name = Soham, Id = 101, Money = 50
Name = Sreeparna k, Id = 106, Money = 51
----------------------------------------------------------- ***************************************************reversed op********************************************
Name = Soham, Id = 101, Money = 50
Name = Ivy, Id = 102, Money = 85
Name = Sreeparna k, Id = 106, Money = 51
Name = Puja, Id = 108, Money = 63

Name = Sreeparna k, Id = 106, Money = 51
Name = Soham, Id = 101, Money = 50
Name = Puja, Id = 108, Money = 63
Name = Ivy, Id = 102, Money = 85
-----------------------------------------------------------